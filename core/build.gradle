import java.util.regex.Matcher

plugins {
    id 'org.jetbrains.kotlin.jvm'
    id "org.jlleitschuh.gradle.ktlint"

    id 'net.researchgate.release'
    id 'maven-publish'
    id 'signing'
    id "org.danilopianini.publish-on-central"
}

release {
    tagTemplate = '$name-$version'
    buildTasks = ['assemble']
    versionPatterns = [
            /(\d+)(.\d+[^\d]*$)/: { Matcher m, Project p -> m.replaceAll("${(m[0][1] as int) + 1}${m[0][2]}") }
    ]
    git {
        requireBranch = '^release-.*$'
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign stuffZip
}

publishOnCentral {
    projectDescription.set("A kotlin and java CSV parser that uses the power of kotlin DSL to simplify parsing and error handling compared to existing solutions")
    projectLongName.set("Kotlin stream CSV")
    licenseName.set("MIT")
    licenseUrl.set("https://opensource.org/licenses/MIT")
    projectUrl.set("https://github.com/pelletier197/kotlin-stream-csv")
    scmConnection.set("git@github.com:pelletier197/kotlin-stream-csv.git")
}

compileKotlin {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib"
    implementation "org.jetbrains.kotlin:kotlin-reflect"

    testImplementation "io.kotest:kotest-runner-junit5:$kotest_version"
    testImplementation "io.kotest:kotest-assertions-core:$kotest_version"
    testImplementation "io.mockk:mockk:$mockk_version"
}

